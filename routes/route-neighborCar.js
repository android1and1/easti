// Generated by CoffeeScript 2.3.1
(function() {
  // 2018-12-19 game is "5min=1app". 
  var client, express, neighborCarFactory, nohm, router, schema;

  express = require('express');

  router = express.Router();

  nohm = void 0;

  schema = void 0;

  client = (require('redis')).createClient();

  client.on('error', function(error) {
    return console.log('::debug info - route neighborCar::', error.message);
  });

  client.on('connect', function() {
    var md;
    md = require('../modules/md-neighborCar');
    nohm = (require('nohm')).Nohm;
    nohm.setPrefix('gaikai');
    nohm.setClient(this);
    return schema = nohm.register(md);
  });

  // till here,has 'global' variable - '' 
  router.get('/', function(req, res, next) {
    return res.redirect(302, '/neighborCar/list');
  });

  router.get('/list', async function(req, res, next) {
    var all, allins, allitems, i, ins, len;
    // top10 sorted by id number.
    all = (await schema.sort({
      field: 'whatistime',
      limit: [0, 10]
    }));
    allins = (await schema.loadMany(all));
    
    // allitems == all instance properties()
    allitems = [];
    for (i = 0, len = allins.length; i < len; i++) {
      ins = allins[i];
      allitems.push(ins.allProperties());
    }
    return res.render('neighborCar/list.pug', {
      top10: allitems
    });
  });

  router.get('/register-car', function(req, res, next) {
    return res.render('neighborCar/register-car.pug', {
      title: 'Register Car(Neighbors)'
    });
  });

  router.get('/purge-db', function(req, res, next) {
    return res.render('neighborCar/purge-db.pug');
  });

  router.delete('/purge-db', async function(req, res, next) {
    var error;
    // quanteetee user from '/neighborCar/purge-db'(GET),click button.
    if (req.xhr) {
      try {
        await nohm.purgeDb(client);
      } catch (error1) {
        error = error1;
        return res.send('purge execution failed. all.');
      }
      return res.send('purge all itmes in db:wiki.');
    } else {
      return res.send('nosense!');
    }
  });

  // add!
  router.post('/register-car', async function(req, res, next) {
    var body, error, ins;
    ins = (await nohm.factory('neighborCar'));
    body = req.body;
    ins.property('checks', 1);
    ins.property({
      brand: body.brand,
      licence_number: body.licence_number,
      color: body.color,
      vehicle_model: body.vehicle_model,
      whatistime: Date.parse(new Date),
      where_seen: body.where_seen,
      memo: body.memo
    });
    try {
      await ins.save();
    } catch (error1) {
      error = error1;
      console.log(ins.errors);
      res.send('save failed.');
    }
    return res.send('saved.');
  });

  neighborCarFactory = function(app) {
    return function(pathname) {
      return app.use(pathname, router);
    };
  };

  module.exports = neighborCarFactory;

}).call(this);
