// Generated by CoffeeScript 2.3.1
(function() {

  /*
  help methods
  */
  var DB_PREFIX, Redis, TABLE_PREFIX, counter, express, formidable, fs, handArray, handSingle, nohm, path, pug, router, schema;

  fs = require('fs');

  pug = require('pug');

  path = require('path');

  express = require('express');

  router = express.Router();

  formidable = require('formidable');

  Redis = require('redis');

  nohm = (require('nohm')).Nohm;

  schema = require('../modules/sche-tricks.js');

  DB_PREFIX = schema.prefixes[0];

  TABLE_PREFIX = schema.prefixes[1];

  
  //counter
  counter = 0;

  // the first time,express working with nohm - redis orm library
  router.get('/', function(req, res, next) {
    var redis;
    redis = Redis.createClient();
    redis.on('error', function(err) {
      return console.log('debug info::route-tricks::', err.message);
    });
    return redis.on('connect', async function() {
      var i, ids, item, items, j, len;
      nohm.setClient(redis);
      nohm.setPrefix(DB_PREFIX);
      ids = (await schema.find());
      items = [];
      if (ids.length > 0) {
        for (j = 0, len = ids.length; j < len; j++) {
          i = ids[j];
          item = (await schema.load(i));
          items.push(item.allProperties());
        }
        return res.render('tricks/index.pug', {
          length: items.length,
          items: items
        });
      } else {
        return res.render('tricks/index.pug', {
          idle: true
        });
      }
    });
  });

  router.get('/add1', function(req, res, next) {
    return res.render('tricks/add1.pug', {
      order: counter++
    });
  });

  router.post('/add1', function(req, res, next) {
    var redis;
    redis = Redis.createClient();
    redis.on('error', function(err) {
      return console.log('debug info::route-tricks::', err.message);
    });
    return redis.on('connect', async function() {
      var check;
      nohm.setClient(redis);
      nohm.setPrefix(DB_PREFIX);
      if (req.body.sign === '1') {
        check = (await handSingle(req.body));
        if (check.error) { // has error
          return res.json({
            state: 'Error'
          });
        } else {
          return res.json({
            state: 'Saved'
          });
        }
      } else {
        //res.json 'state':'you has given ' + req.body.sign + ' forms,wait our resolving.'
        return res.json({
          'meiyou': 'shi qing!'
        });
      }
    });
  });

  //handArray res,req.body
  router.post('/onemore', function(req, res, next) {
    //note that,"pug.renderFile" retrieves .pug path,not same as "res.render"
    // res.render works from root directory - "<project>/views"
    return res.send(pug.renderFile('views/tricks/snippet-form.pug', {
      order: counter++
    }));
  });

  handSingle = async function(body) {
    var trick, valid;
    trick = (await nohm.factory(TABLE_PREFIX));
    trick.property({
      about: body.about,
      content: body.content,
      visits: body.visits
    });
    valid = (await trick.validate(void 0, false));
    console.log('inner help func::handSingle', valid);
    if (!valid) {
      console.dir(trick.errors);
      // return a promise
      return Promise.resolve({
        error: true
      });
    } else {
      return trick.save().then(function() {
        return Promise.resolve({
          error: false
        });
      });
    }
  };

  handArray = function(length, body) {
    var i, j, ref, results;
    results = [];
    for (i = j = 0, ref = length; (0 <= ref ? j < ref : j > ref); i = 0 <= ref ? ++j : --j) {
      results.push(handSingle(res, {
        about: body[i]["about"],
        content: body[i]["content"],
        visits: body[i]["visits"]
      }));
    }
    return results;
  };

  module.exports = router;

}).call(this);
