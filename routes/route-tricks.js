// Generated by CoffeeScript 2.1.1
(function() {

  /*
  help methods
  */
  var DB_PREFIX, Redis, TABLE_PREFIX, counter, express, formidable, fs, handArray, handSingle, nohm, path, pug, router, schema;

  fs = require('fs');

  pug = require('pug');

  path = require('path');

  express = require('express');

  router = express.Router();

  formidable = require('formidable');

  Redis = require('redis');

  nohm = (require('nohm')).Nohm;

  schema = require('../modules/sche-tricks.js');

  DB_PREFIX = schema.prefixes[0];

  TABLE_PREFIX = schema.prefixes[1];

  
  //counter
  counter = 0;

  // the first time,express working with nohm - redis orm library
  router.get('/', function(req, res, next) {
    var redis;
    redis = Redis.createClient();
    redis.on('error', function(err) {
      return console.log('debug info::route-tricks::', err.message);
    });
    return redis.on('connect', async function() {
      var i, ids, item, items, j, len;
      nohm.setClient(redis);
      nohm.setPrefix(DB_PREFIX);
      ids = (await schema.find());
      items = [];
      if (ids.length > 0) {
        for (j = 0, len = ids.length; j < len; j++) {
          i = ids[j];
          item = (await schema.load(i));
          items.push(item.allProperties());
        }
        return res.render('tricks/index.pug', {
          length: items.length,
          items: items
        });
      } else {
        return res.render('tricks/index.pug', {
          idle: true
        });
      }
    });
  });

  router.get('/add', function(req, res, next) {
    return res.render('tricks/add.pug', {
      order: counter++
    });
  });

  router.post('/add', function(req, res, next) {
    var redis;
    redis = Redis.createClient();
    redis.on('error', function(err) {
      return console.log('debug info::route-tricks::', err.message);
    });
    return redis.on('connect', async function() {
      var response;
      nohm.setClient(redis);
      nohm.setPrefix(DB_PREFIX);
      if (req.body.sign === '1') {
        response = (await handSingle(req.body));
        return res.json(response);
      } else {
        response = (await handArray(parseInt(req.body.sign), req.body));
        return res.json(response);
      }
    });
  });

  router.post('/onemore', function(req, res, next) {
    //note that,"pug.renderFile" retrieves .pug path,not same as "res.render"
    // res.render works from root directory - "<project>/views"
    return res.send(pug.renderFile('views/tricks/snippet-form.pug', {
      order: counter++
    }));
  });

  router.post('/:id', function(req, res, next) {
    var id, redis;
    // page index will ajax to this route,response via 'json'
    id = req.params.id;
    redis = Redis.createClient();
    redis.on('error', function(err) {
      return console.log('debug info::route-tricks::', err.message);
    });
    return redis.on('connect', async function() {
      var trick;
      nohm.setClient(redis);
      nohm.setPrefix(DB_PREFIX);
      trick = (await schema.load(id));
      return res.json(trick.allProperties());
    });
  });

  handSingle = async function(body) {
    var trick, valid;
    trick = (await nohm.factory(TABLE_PREFIX));
    trick.property({
      about: body.about,
      content: body.content,
      visits: body.visits,
      moment: Date.parse(new Date())
    });
    valid = (await trick.validate(void 0, false));
    if (!valid) {
      
      //console.dir trick.errors
      // return a promise
      return Promise.resolve({
        status: 'error',
        title: 'failure due to database suit',
        errors: trick.errors
      });
    } else {
      return trick.save().then(function() {
        return Promise.resolve({
          status: 'successfully',
          content: trick.allProperties()
        });
      });
    }
  };

  handArray = function(length, body) {
    var allthings, j, results;
    allthings = (function() {
      results = [];
      for (var j = 0; 0 <= length ? j < length : j > length; 0 <= length ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this).map(function(i) {
      return handSingle({
        about: body["about"][i],
        content: body["content"][i],
        visits: body["visits"][i]
      });
    });
    return Promise.all(allthings);
  };

  module.exports = router;

}).call(this);
