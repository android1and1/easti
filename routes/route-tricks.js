// Generated by CoffeeScript 2.3.1
(function() {
  var DB_PREFIX, Redis, TABLE_PREFIX, counter, express, formidable, fs, nohm, path, pug, router, schema;

  fs = require('fs');

  pug = require('pug');

  path = require('path');

  express = require('express');

  router = express.Router();

  formidable = require('formidable');

  Redis = require('redis');

  nohm = (require('nohm')).Nohm;

  schema = require('../modules/sche-tricks.js');

  DB_PREFIX = 'EastI';

  TABLE_PREFIX = schema.prefix;

  
  //counter
  counter = 1;

  // the first time,express working with nohm - redis orm library
  router.get('/', function(req, res, next) {
    var redis;
    redis = Redis.createClient();
    redis.on('error', function(err) {
      return console.log('debug info::route-tricks::', err.message);
    });
    return redis.on('connect', async function() {
      var i, ids, item, items, j, len;
      nohm.setClient(redis);
      nohm.setPrefix(DB_PREFIX);
      ids = (await schema.find());
      items = [];
      if (ids.length > 0) {
        for (j = 0, len = ids.length; j < len; j++) {
          i = ids[j];
          item = (await schema.load(i));
          items.push(item.allProperties());
        }
        return res.render('tricks/index.pug', {
          length: items.length,
          items: items
        });
      } else {
        return res.render('tricks/index.pug', {
          idle: true
        });
      }
    });
  });

  router.get('/add1', function(req, res, next) {
    return res.render('tricks/add1.pug', {
      order: 0
    });
  });

  router.post('/add1', function(req, res, next) {
    var redis;
    redis = Redis.createClient();
    redis.on('error', function(err) {
      return console.log('debug info::route-tricks::', err.message);
    });
    return redis.on('connect', async function() {
      var trick, valid;
      nohm.setClient(redis);
      nohm.setPrefix(DB_PREFIX);
      trick = (await nohm.factory(TABLE_PREFIX));
      // the first time,we handle the easiest case:one form
      //console.dir req.body
      trick.property({
        about: req.body.about,
        content: req.body.content,
        visits: req.body.visits
      });
      valid = (await trick.validate(void 0, false));
      console.log('valid==', valid);
      if (!valid) {
        return res.send(trick.errors);
      } else {
        return trick.save().then(function() {
          //res.json 'success for save an instance.'
          return res.redirect(301, '/tricks/successfully');
        });
      }
    });
  });

  /*
   * this route for client page - /tricks/add1,ajax request
  resp = {} 
  for i,v of req.body
    resp[i] = v
  res.json resp
   */
  router.post('/onemore', function(req, res, next) {
    //note that,"pug.renderFile" retrieves .pug path,not same as "res.render"
    // res.render works from root directory - "<project>/views"
    return res.send(pug.renderFile('views/tricks/snippet-form.pug', {
      order: counter++
    }));
  });

  router.get('/successfully', function(req, res, next) {
    console.log('till here.');
    //successfully.pug
    //res.render 'tricks/successfully'
    return res.render('tricks/index');
  });

  module.exports = router;

}).call(this);
