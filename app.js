// Generated by CoffeeScript 2.3.2
(function() {
  // first of first check if 'redis-server' is running.
  var Nohm, NohmModel, PROJECT_ROOT, Session, Store, app, express, http, path, pgrep, qr_image, redis, server, spawn, static_root;

  ({spawn} = require('child_process'));

  pgrep = spawn('/usr/bin/pgrep', ['redis-server']);

  pgrep.on('close', function(code) {
    if (code !== 0) {
      console.log('should run redis-server first.');
      return process.exit(1);
    }
  });

  path = require('path');

  http = require('http');

  qr_image = require('qr-image');

  ({Nohm, NohmModel} = require('nohm'));

  redis = (require('redis')).createClient();

  express = require('express');

  app = express();

  PROJECT_ROOT = process.env.HOME + '/easti';

  app.set('view engine', 'pug');

  //static root directory setup
  static_root = path.join(PROJECT_ROOT, 'public');

  app.use(express.static(static_root));

  
  // enable the variable - "req.body".like the old middware - "bodyParser"
  app.use(express.urlencoded({
    extended: false
  }));

  // session
  Session = require('express-session');

  Store = (require('connect-redis'))(Session);

  app.use(Session({
    cookie: {
      maxAge: 1 * 1000 * 60, // 1 minute
      httpOnly: true,
      path: '/admin-login'
    },
    secret: 'youkNoW.',
    store: new Store,
    resave: false,
    saveUninitialized: true
  }));

  app.get('/', function(req, res) {
    return res.render('index', {
      title: 'Welcome!'
    });
  });

  app.get('/daka', function(req, res) {
    return res.render('daka', {
      title: 'Welcome Daka!'
    });
  });

  app.get('/create-qrcode', function(req, res) {
    var text;
    text = req.query.text;
    text = 'http://192.168.5.2:3003/login-success?text=' + text;
    res.type('png');
    return qr_image.image(text).pipe(res);
  });

  app.get('/login-success', function(req, res) {
    var status, text;
    text = req.query.text;
    if (text === 'you are beautiful.') {
      status = '打卡成功 ok';
    } else {
      status = '验证失败 打卡未完成';
    }
    return res.render('login-success', {
      title: 'login Result',
      status: status
    });
  });

  app.get('/admin-login', function(req, res) {
    return res.render('/admin-login-form', {
      title: 'Fill Authentication Form'
    });
  });

  app.post('/admin-login', function(req, res) {
    var auth, name, password;
    ({name, password} = req.body);
    // match name:password from redis db.
    if (!req.session.auth) {
      auth = {
        role: 'Admin',
        initialTime: new Date
      };
      req.session.auth = auth;
    }
    
    // its pagejs is /mine/mine-admin-login.js
    return res.render('admin-login', {
      auth: req.session.auth,
      title: 'you are administrator'
    });
  });

  app.use(function(req, res) {
    res.status(404);
    return res.render('404');
  });

  app.use(function(err, req, res, next) {
    console.error('occurs 500 error. [[ ' + err.stack + '  ]]');
    res.type('text/plain');
    res.status(500);
    return res.send('500 - Server Error!');
  });

  if (require.main === module) {
    server = http.Server(app);
    server.listen(3003, function() {
      return console.log('server running at port 3003;press Ctrl-C to terminate.');
    });
  } else {
    module.exports = app;
  }

}).call(this);
