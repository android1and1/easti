// Generated by CoffeeScript 2.3.2
(function() {
  // first of first check if 'redis-server' is running.
  var Account, Daka, Nohm, Session, Store, accountModel, app, credential, crypto, dakaModel, express, filter, fs, hashise, http, initSession, matchDB, path, pgrep, qr_image, redis, server, sha256, spawn, static_root, superpass, updateAuthSession;

  ({spawn} = require('child_process'));

  pgrep = spawn('/usr/bin/pgrep', ['redis-server']);

  pgrep.on('close', function(code) {
    if (code !== 0) {
      console.log('should run redis-server first.');
      return process.exit(1);
    }
  });

  path = require('path');

  fs = require('fs');

  http = require('http');

  qr_image = require('qr-image');

  crypto = require('crypto');

  // super-user's credential
  fs.stat('./credentials/super-user.js', function(err, stats) {
    if (err) {
      console.log('Credential File Not Exists,Fix It.');
      return process.exit(1);
    }
  });

  credential = require('./credentials/super-user.js');

  superpass = credential.password;

  ({Nohm} = require('nohm'));

  Account = require('./modules/md-account');

  Daka = require('./modules/md-daka');

  dakaModel = void 0;

  accountModel = void 0;

  redis = (require('redis')).createClient();

  redis.on('error', function(err) {
    return console.log('Heard that:', err);
  });

  redis.on('connect', function() {
    Nohm.setClient(this);
    Nohm.setPrefix('DaKa'); // the main api name.
    // register the 2 models.
    dakaModel = Nohm.register(Daka);
    return accountModel = Nohm.register(Account);
  });

  express = require('express');

  app = express();

  app.set('view engine', 'pug');

  static_root = path.join(__dirname, 'public');

  app.use(express.static(static_root));

  
  // enable "req.body",like the old middware - "bodyParser"
  app.use(express.urlencoded({
    extended: false
  }));

  // session
  Session = require('express-session');

  Store = (require('connect-redis'))(Session);

  app.use(Session({
    cookie: {
      maxAge: 86400 * 1000, // one day. 
      httpOnly: true,
      path: '/' // 似乎太过宽泛，之后有机会会琢磨这个
    },
    secret: 'youkNoW.',
    store: new Store,
    resave: false,
    saveUninitialized: true
  }));

  app.get('/', function(req, res) {
    var auth, desc, ref;
    auth = void 0;
    if (req != null ? (ref = req.session) != null ? ref.auth : void 0 : void 0) {
      auth = req.session.auth;
    }
    desc = JSON.stringify(req.headers["user-agent"]);
    return res.render('index', {
      title: 'Welcome!',
      auth: auth,
      browser_desc: desc
    });
  });

  app.get('/user/daka', function(req, res) {
    var auth_obj;
    auth_obj = req.session.auth;
    if (auth_obj === void 0) {
      return res.redirect(302, '/user/login');
    } else {
      return res.render('user-daka', {
        title: 'User Console',
        auth_obj: auth_obj
      });
    }
  });

  app.get('/user/login', function(req, res) {
    return res.render('user-login', {
      title: 'Fill User Login Form'
    });
  });

  app.post('/user/login', async function(req, res) {
    var alias, bool, namebool, password, passwordbool;
    // reference line#163
    ({alias, password} = req.body);
    // filter these 2 strings for injecting
    namebool = filter(alias);
    passwordbool = filter(password);
    if (!namebool && passwordbool) {
      return res.json('含有非法字符（只允许ASCII字符和数字)!');
    }
    
    // auth initialize
    initSession(req);
    // first check if exists this alias name?
    bool = (await matchDB(accountModel, alias, password));
    if (bool) {
      
      // till here,login data is matches.
      updateAuthSession(req, 'user');
      return res.json('user role entablished.');
    } else {
      updateAuthSession(req, 'unknown');
      return res.json('login failure.');
    }
  });

  app.get('/admin/daka', function(req, res) {
    return res.render('admin-daka', {
      title: 'Admin Console'
    });
  });

  app.get('/create-qrcode', function(req, res) {
    var text;
    text = req.query.text;
    
    // templary solid 
    text = 'http://192.168.5.2:3003/login-response?text=' + text;
    res.type('png');
    return qr_image.image(text).pipe(res);
  });

  app.get('/user/login-response', function(req, res) {
    var status, text;
    text = req.query.text;
    if (text === 'you are beautiful.') {
      status = '打卡成功';
    } else {
      status = '验证失败 打卡未完成';
    }
    return res.render('login-response', {
      title: 'login Result',
      status: status
    });
  });

  app.get('/admin/list-accounts', async function(req, res) {
    var inss, results;
    if (req.session.auth.alive === false) {
      return res.redirect(302, '/admin/login');
    }
    inss = (await accountModel.findAndLoad());
    results = [];
    inss.forEach(function(one) {
      var obj;
      obj = {};
      obj.alias = one.property('alias');
      obj.code = one.property('code');
      obj.initial_timestamp = one.property('initial_timestamp');
      obj.password = one.property('password');
      obj.id = one.id;
      return results.push(obj);
    });
    return res.render('list-accounts', {
      title: 'Admin:List Accounts',
      accounts: results
    });
  });

  app.get('/superuser/login', function(req, res) {
    return res.render('superuser-login.pug', {
      title: 'Are You A Super?'
    });
  });

  app.post('/superuser/login', function(req, res) {
    var hash, password, superkey;
    // initial sesson.auth
    initSession(req);
    superkey = (require('./credentials/super-user.js')).password;
    ({password} = req.body);
    hash = sha256(password);
    if (hash === superkey) {
      updateAuthSession(req, 'superuser');
      return res.json({
        staus: 'super user login success.'
      });
    } else {
      updateAuthSession(req, 'unknown');
      return res.json({
        staus: 'super user login failurre.'
      });
    }
  });

  app.get('/admin/login', function(req, res) {
    // pagejs= /mine/mine-admin-login.js
    return res.render('admin-login', {
      title: 'Fill Authentication Form'
    });
  });

  app.post('/admin/login', async function(req, res) {
    var alias, bool, password;
    // initial session.auth
    initSession(req);
    ({alias, password} = req.body);
    bool = (await matchDB(accountModel, alias, password));
    if (bool) {
      updateAuthSession(req, 'admin');
      return res.render('admin-login-success', {
        title: 'test if administrator',
        auth_data: {
          alias: alias,
          password: password
        }
      });
    } else {
      updateAuthSession(req, 'unknown');
      return res.json({
        status: 'authenticate error',
        reason: 'user account name/password peer  not match stored.'
      });
    }
  });

  app.get('/admin/register-user', function(req, res) {
    var ref, ref1;
    if (((ref = req.session) != null ? (ref1 = ref.auth) != null ? ref1.role : void 0 : void 0) !== 'admin') {
      return res.redirect(302, '/admin/login');
    } else {
      return res.render('admin-register-user', {
        title: 'Admin-Register-User'
      });
    }
  });

  app.get('/superuser/register-admin', function(req, res) {
    var ref, ref1;
    if (((ref = req.session) != null ? (ref1 = ref.auth) != null ? ref1.role : void 0 : void 0) !== 'superuser') {
      return res.redirect(302, '/superuser/login');
    } else {
      return res.render('superuser-register-admin', {
        defaultValue: '1234567',
        title: 'Superuser-register-admin'
      });
    }
  });

  app.post('/admin/register-user', async function(req, res) {
    var alias, error, ins, password;
    ({alias, password} = req.body);
    if (!filter(alias || !filter(password))) {
      return res.json('Wrong:User Name(alias) contains invalid character(s).');
    }
    ins = (await Nohm.factory('account'));
    ins.property({
      alias: alias,
      role: 'user',
      initial_timestamp: Date.parse(new Date),
      // always remember:hashise!!
      password: hashise(password)
    });
    try {
      await ins.save();
      return res.json('Register User - ' + alias);
    } catch (error1) {
      error = error1;
      return res.json(ins.errors);
    }
  });

  app.post('/superuser/register-admin', async function(req, res) {
    var adminname, error, ins;
    ({adminname} = req.body);
    if (!filter(adminname)) {
      return res.json('Wrong:Admin Name(alias) contains invalid character(s).');
    }
    ins = (await Nohm.factory('account'));
    ins.property({
      alias: adminname,
      role: 'admin',
      initial_timestamp: Date.parse(new Date),
      password: hashise('1234567') // default password. 
    });
    try {
      await ins.save();
      return res.json('Saved.');
    } catch (error1) {
      error = error1;
      return res.json(ins.errors);
    }
  });

  app.use(function(req, res) {
    res.status(404);
    return res.render('404');
  });

  app.use(function(err, req, res, next) {
    console.error('occurs 500 error. [[ ' + err.stack + '  ]]');
    res.type('text/plain');
    res.status(500);
    return res.send('500 - Server Error!');
  });

  if (require.main === module) {
    server = http.Server(app);
    server.listen(3003, function() {
      return console.log('server running at port 3003;press Ctrl-C to terminate.');
    });
  } else {
    module.exports = app;
  }

  
  // initSession is a help function
  initSession = function(req) {
    var ref;
    if (!((ref = req.session) != null ? ref.auth : void 0)) {
      req.session.auth = {
        counter: 0,
        tries: [],
        matches: [],
        role: 'unknown'
      };
    }
    return null;
  };

  // hashise is a help function.
  hashise = function(plain) {
    var hash;
    hash = crypto.createHash('sha256');
    hash.update(plain);
    return hash.digest('hex');
  };

  
  // filter is a help function
  filter = function(be_dealt_with) {
    // return true is safe,return false means injectable.
    return !/\W/.test(be_dealt_with);
  };

  //matchDB is a help function *Notice that* invoke this method via "await <this>"
  matchDB = async function(db, alias, password) {
    var item, items;
    // argument -- db:example 'accountModel'
    items = (await db.findAndLoad({
      'alias': alias
    }));
    if (items.length === 0) { // means no found.
      return false;
    } else {
      item = items[0];
      if ((hashise(password)) === (item.property('password'))) {
        return true;
      } else {
        return false;
      }
    }
  };

  // updateAuthSession is a help function
  updateAuthSession = function(req, role) {
    var counter, timestamp;
    timestamp = new Date;
    counter = req.session.auth.counter++;
    req.session.auth.tries.push('counter#' + counter + ':user try to login at ' + timestamp);
    req.session.auth.role = role;
    if (role === 'unknown') {
      return req.session.auth.matches.push('*Not* Matches counter#' + counter + ' .');
    } else {
      return req.session.auth.matches.push('Matches counter#' + counter + ' .');
    }
  };

  
  // for authenticate super user password.
  sha256 = function(plain) {
    return crypto.createHash('sha256').update(plain).digest('hex');
  };

}).call(this);
