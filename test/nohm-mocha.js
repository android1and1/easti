// Generated by CoffeeScript 2.3.1
(function() {
  var Nohm, NohmModel, Password, Schema, assert, db, nohm;

  assert = require('assert');

  // mocha + nohm,for leaning,test,extending of npm-nohm api.
  nohm = require('nohm');

  Nohm = nohm.Nohm;

  NohmModel = nohm.NohmModel;

  db = void 0;

  Schema = void 0;

  Password = (function() {
    class Password extends NohmModel {};

    Password.idGenerator = 'increment';

    Password.modelName = 'pass';

    Password.definitions = {
      for_what: {
        type: 'string',
        index: true,
        validations: ['notEmpty']
      },
      pair_text: {
        type: 'string',
        validations: ['notEmpty']
      },
      update_time: {
        type: 'timestamp',
        defaultValue: Date.now()
      },
      visits: {
        defaultValue: 0,
        load_pure: true,
        type: function(newv, key, oldv) {
          return parseInt(oldv) + 1;
        }
      }
    };

    return Password;

  }).call(this);

  describe('Mocha + Nohm::', function() {
    var client;
    client = (require('redis')).createClient();
    client.on('connect', function() {
      Nohm.setClient(this);
      Nohm.setPrefix('laofu'); // lao fu
      // Dont Forget Register!
      Schema = Nohm.register(Password);
      return db = new Schema;
    });
    return describe('Store Instance As One Item::', function() {
      before(function() {
        return Nohm.purgeDb(client);
      });
      it('should has nothing initial time::', function() {
        return db.find().then(function(something) {
          return assert.equal(something.length, 0);
        });
      });
      it('should store 1 item::', function() {
        db.property('for_what', 'mac system');
        db.property('pair_text', 'mac-user:chilemeiyou(chi le mei you)');
        db.property('visits', 'Am I?');
        return db.save().then(function(something) {
          return assert.equal(db.id, '1');
        });
      });
      it('should has one item and its property-visits is 1::', function() {
        return db.find().then(async function(something) {
          var item;
          item = (await db.load(something[0]));
          return assert.equal(item.visits, 1);
        });
      });
      it('above item updated then its visits will add 1::', async function() {
        var id, ids, item;
        db.property('visits', 'any');
        await db.save();
        ids = (await db.find({
          'for_what': 'mac system'
        }));
        id = ids[0];
        item = (await db.load(id));
        return assert.equal(item.visits, 2);
      });
      return it('above item updated 3 times then its visits value is 5::', async function() {
        var i, id, ids, item, j;
        for (i = j = 1; j <= 3; i = ++j) {
          db.property('visits', '');
          await db.save();
        }
        ids = (await db.find({
          'for_what': 'mac system'
        }));
        id = ids[0];
        item = (await db.load(id));
        return assert.equal(item.visits, 5);
      });
    });
  });

}).call(this);
