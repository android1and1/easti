// Generated by CoffeeScript 2.3.1
(function() {
  var Article, ArticleModel, Comment, CommentModel, Nohm, NohmModel, adb, assert, cdb, nohm;

  assert = require('assert');

  nohm = require('nohm');

  Nohm = nohm.Nohm;

  NohmModel = nohm.NohmModel;

  // keep global db-like variables.
  CommentModel = void 0;

  ArticleModel = void 0;

  cdb = void 0;

  adb = void 0;

  Article = (function() {
    class Article extends NohmModel {};

    Article.modelName = 'article';

    Article.idGenerator = 'increment';

    Article.definitions = {
      title: {
        type: 'string',
        unique: true,
        validations: ['notEmpty']
      },
      intro: {
        type: 'string',
        validations: ['notEmpty']
      },
      content: {
        type: 'string'
      },
      visits: {
        type: 'integer',
        defaultValue: 0
      }
    };

    return Article;

  }).call(this);

  Comment = (function() {
    class Comment extends NohmModel {};

    Comment.modelName = 'comment';

    Comment.idGenerator = 'increment';

    Comment.definitions = {
      reader: {
        type: 'string',
        index: true,
        validations: ['notEmpty']
      },
      title: {
        type: 'string',
        unique: true,
        validations: ['notEmpty']
      },
      stars: {
        type: 'integer',
        validations: [
          'notEmpty',
          function(newv) {
            var result;
            result = false;
            if (typeof parseInt(newv) === 'number' && parseInt(newv) <= 5) {
              result = true;
            }
            return Promise.resolve(result);
          }
        ]
      },
      content: {
        type: 'string'
      }
    };

    return Comment;

  }).call(this);

  describe('Link Behaviour Of Nohm API:', function() {
    before(function() {
      var client;
      client = (require('redis')).createClient();
      client.on('error', function(err) {
        console.error(err.message);
        throw TypeError('No Redis Server Connection');
      });
      return client.on('connect', async function() {
        Nohm.setClient(this);
        Nohm.setPrefix('laofu');
        // register class
        CommentModel = Nohm.register(Comment);
        ArticleModel = Nohm.register(Article);
        
        //cdb == Comment DB,adb == Article DB
        cdb = (await Nohm.factory('comment'));
        adb = (await Nohm.factory('article'));
        
        // before new test,clear the db.
        return (await Nohm.purgeDb(this));
      });
    });
    it('create 1 comment and 1 article,should successfully::', async function() {
      var res;
      adb.property({
        title: 'a delicate truth',
        intro: 'len zhan',
        content: 'at word II ,in britian da shi guan.'
      });
      res = (await adb.validate(void 0, false));
      if (res) {
        await adb.save();
      } else {
        console.log(adb.errors);
      }
      cdb.property({
        title: 'comment about a delicate truth',
        reader: 'su ning',
        stars: 2,
        content: 'it is wonderfulexperien while reading this story.'
      });
      res = (await cdb.validate(void 0, false));
      if (res) {
        await cdb.save();
      } else {
        console.log(cdb.errors);
      }
      
      // till here,means 1 article and 1 comment is created.
      return assert.ok(res);
    });
    it('comment id 1 should has correctly inf::', async function() {
      var properties;
      properties = (await cdb.load(1));
      return assert(properties.title === 'comment about a delicate truth');
    });
    return it('article link comment should success::', async function() {
      var adb2, cdb1, cdb2, num;
      adb2 = new ArticleModel;
      cdb2 = new CommentModel;
      adb2.property({
        title: 'her name is New York',
        intro: 'adult lullaby',
        content: 'singer is Paloma Faith(British).'
      });
      cdb1 = (await Nohm.factory('comment', 1)); // this instance created at step1(test1).
      cdb2.property({
        title: 'comment of new york',
        stars: 4,
        reader: 'tony',
        content: ' Great Stroy,i like it.'
      });
      adb2.link(cdb1);
      adb2.link(cdb2);
      await adb2.save();
      // now adb2 has 1 link which is instance of CommentModel
      num = (await adb2.numLinks('CommentModel'));
      return assert.equal(num, 0);
    });
  });

}).call(this);
