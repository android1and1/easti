// Generated by CoffeeScript 2.3.1
(function() {
  // tricks is route for 'saving/updating/deleting/finding' tricks-db (a nohm-like database)

  // first check if redis-server is running,if at macbook air,it is not running as a service
  // we should manually start it,
  // in this standalone test,we can run "redis-server ./redisdb/redis.conf && mocha <this-test-script.js>"
  var Browser, app, browser, checkifredisserverisrunning, server, tellAndExit;

  checkifredisserverisrunning = function() {
    var spawn;
    ({spawn} = require('child_process'));
    return new Promise(function(resolve) {
      var pgrep;
      pgrep = spawn('/usr/bin/pgrep', ['redis-server', '-l']);
      return pgrep.on('close', function(code) {
        if (code !== 0) {
          return resolve(true);
        } else {
          return resolve(false);
        }
      });
    });
  };

  tellAndExit = function() { 
    console.log('should start redis-server ./redisdb/redis.conf first(special for apple macbook air user).');
    console.log('alternatively,can run this:');
    console.log('\t\t"redis-server ./redisdb/redis.conf && mocha <this-test-script.js>"');
    return process.exit(1);
  };

  Browser = require('zombie');

  Browser.localhost('www.fellow5.cn', 4140);

  browser = new Browser;

  browser.waitDuration = '30s';

  app = require('../app.js');

  server = (require('http')).Server(app);

  server.on('error', function(err) {
    console.log('///////');
    console.error(err);
    return console.log('///////');
  });

  server.listen(4140);

  describe('it will be successfully while accessing /tricks/add1::', function() {
    before(async function() {
      var bool;
      bool = (await checkifredisserverisrunning());
      if (bool) {
        tellAndExit();
      }
      return browser.visit('http://www.fellow5.cn/tricks/add1');
    });
    after(function() {
      return server.close();
    });
    it('it will be success while accessing route - /tricks/add1::', function() {
      browser.assert.success();
      return browser.assert.status(200);
    });
    it('The 3 fields  all have its name attribute::', function() {
      return browser.assert.elements('.form-control[name]', 3);
    });
    it('The form action is same url.href and method is POST::', function() {
      browser.assert.attribute('form', 'action', '');
      return browser.assert.attribute('form', 'method', 'POST');
    });
    it('has a "onemore" button::', function() {
      return browser.assert.element('button#onemore');
    });
    return describe('submit form::', function() {
      before(function() {
        browser.fill('[name=content]', 'there was a game between county a and country b,\nlong long ago..');
        browser.fill('[name=about]', 'aboutone');
        browser.fill('[type=number]', '1111');
        return browser.pressButton('button');
      });
      it('should be redircted to /tricks/successfully page::', function() {
        browser.assert.success();
        return browser.assert.text('title', 'tricks-successfully');
      });
      return it('should add 1 item::', function() {});
    });
  });

}).call(this);
